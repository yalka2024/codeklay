// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          String   @default("user")
  hashedPassword String?
  accounts      Account[]
  sessions      Session[]
  apiKeys       APIKey[]
  projects      Project[]
  projectMembers ProjectMember[]
  files         ProjectFile[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires   DateTime

  @@unique([identifier, token])
}

model APIKey {
  id        String   @id @default(cuid())
  key       String   @unique
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String         @id @default(cuid())
  name        String
  description String?
  status      String         @default("ACTIVE")
  ownerId     String
  owner       User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  settings    Json?
  template    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  members     ProjectMember[]
  files       ProjectFile[]
}

model ProjectMember {
  id          String   @id @default(cuid())
  projectId   String
  userId      String
  role        String
  permissions Json?
  joinedAt    DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model ProjectFile {
  id          String   @id @default(cuid())
  projectId   String
  path        String
  name        String
  content     String?
  size        Int
  type        String?
  lastModified DateTime @default(now())
  modifiedBy  String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [modifiedBy], references: [id], onDelete: Cascade)

  @@unique([projectId, path])
}
