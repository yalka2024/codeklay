name: Security & Compliance Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - vulnerability
          - compliance
          - secrets
          - dependency

env:
  SCAN_RESULTS_DIR: security-scan-results
  COMPLIANCE_REPORT_DIR: compliance-reports

jobs:
  # Container Image Vulnerability Scanning
  container-vulnerability-scan:
    name: Container Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'vulnerability' || github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: docker build -t codepal-app:latest .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'codepal-app:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '1'
        ignore-unfixed: true
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Snyk container scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: codepal-app:latest
        args: --severity-threshold=high --json-file-output=snyk-container-results.json
    
    - name: Upload Snyk results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: snyk-container-results
        path: snyk-container-results.json

  # Dependency Vulnerability Scanning
  dependency-vulnerability-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'vulnerability' || github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: |
        npm audit --audit-level=high --json > npm-audit-results.json || true
        npm audit --audit-level=high
    
    - name: Run Snyk dependency scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-dependency-results.json
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'CodePal'
        path: '.'
        format: 'JSON'
        out: 'owasp-results'
        args: >
          --failOnCVSS 7
          --enableRetired
          --enableExperimental
    
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-results
        path: |
          npm-audit-results.json
          snyk-dependency-results.json
          owasp-results/

  # Secrets Detection
  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secrets scanning
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        args: --only-verified --fail --json
      continue-on-error: true
    
    - name: Run GitGuardian
      uses: GitGuardian/ggshield-action@main
      with:
        mode: 'pre-commit'
        exit-zero: false
    
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: --verbose --redact

  # Infrastructure Security Scanning
  infrastructure-security-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'compliance' || github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.0'
    
    - name: Terraform Security Scan
      run: |
        cd infrastructure/terraform
        terraform init
        terraform plan -out=tfplan
        terraform show -json tfplan > terraform-plan.json
    
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infrastructure/terraform
        framework: terraform
        output_format: json
        output_file_path: checkov-results.json
        soft_fail: false
    
    - name: Run Tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: infrastructure/terraform
        format: json
        out: tfsec-results.json
    
    - name: Run Terrascan
      uses: accurics/terrascan-action@v1.0.0
      with:
        iac_type: terraform
        iac_version: v14
        iac_dir: infrastructure/terraform
        output_format: json
        output_file_path: terrascan-results.json
    
    - name: Upload infrastructure scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: infrastructure-scan-results
        path: |
          checkov-results.json
          tfsec-results.json
          terrascan-results.json

  # Kubernetes Security Scanning
  kubernetes-security-scan:
    name: Kubernetes Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'compliance' || github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Kubesec
      run: |
        # Install kubesec
        curl -sSL https://github.com/controlplaneio/kubesec/releases/download/v2.11.0/kubesec_linux_amd64.tar.gz | tar xz
        chmod +x kubesec
        
        # Scan Kubernetes manifests
        mkdir -p kubesec-results
        for file in infrastructure/kubernetes/*.yaml; do
          if [ -f "$file" ]; then
            ./kubesec scan "$file" > "kubesec-results/$(basename "$file" .yaml).json" || true
          fi
        done
    
    - name: Run Polaris
      uses: FairwindsOps/polaris@v5.0.0
      with:
        path: infrastructure/kubernetes
        format: json
        output-file: polaris-results.json
    
    - name: Run Kube-bench
      uses: aquasecurity/kube-bench@v0.6.0
      with:
        benchmark: 'cis-1.6'
        json: true
        output-file: kube-bench-results.json
    
    - name: Upload Kubernetes scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kubernetes-scan-results
        path: |
          kubesec-results/
          polaris-results.json
          kube-bench-results.json

  # Compliance Auditing
  compliance-audit:
    name: Compliance Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'compliance' || github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install compliance tools
      run: |
        pip install bandit safety pip-audit
    
    - name: Run Bandit (Python security linter)
      run: |
        bandit -r . -f json -o bandit-results.json || true
        bandit -r . -f txt -o bandit-results.txt || true
    
    - name: Run Safety (Python dependency security)
      run: |
        safety check --json --output safety-results.json || true
        safety check --output safety-results.txt || true
    
    - name: Run pip-audit
      run: |
        pip-audit --format json --output pip-audit-results.json || true
        pip-audit --output pip-audit-results.txt || true
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/cwe-top-25
        output-format: json
        output-file: semgrep-results.json
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, python
        queries: security-extended,security-and-quality
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: Upload compliance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: compliance-audit-results
        path: |
          bandit-results.json
          bandit-results.txt
          safety-results.json
          safety-results.txt
          pip-audit-results.json
          pip-audit-results.txt
          semgrep-results.json

  # SAST (Static Application Security Testing)
  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'vulnerability' || github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint security rules
      run: |
        npm install eslint-plugin-security eslint-plugin-node
        npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-security-results.json || true
    
    - name: Run SonarQube
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        scannerHomebrew: SonarScanner
    
    - name: Run OWASP ZAP Baseline
      uses: zaproxy/action-baseline@v0.8.0
      with:
        target: 'https://staging.codepal.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
    
    - name: Upload SAST results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sast-scan-results
        path: eslint-security-results.json

  # License Compliance
  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'compliance' || github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run license-checker
      run: |
        npm install -g license-checker
        license-checker --json --out license-checker-results.json || true
        license-checker --summary --out license-checker-summary.txt || true
    
    - name: Run npm-license-crawler
      run: |
        npm install -g npm-license-crawler
        npm-license-crawler --json npm-license-crawler-results.json || true
    
    - name: Upload license results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: license-compliance-results
        path: |
          license-checker-results.json
          license-checker-summary.txt
          npm-license-crawler-results.json

  # Generate Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [container-vulnerability-scan, dependency-vulnerability-scan, secrets-detection, infrastructure-security-scan, kubernetes-security-scan, compliance-audit, sast-scan, license-compliance]
    if: always()
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all scan results
      uses: actions/download-artifact@v4
      with:
        path: scan-results
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install report generator
      run: |
        pip install jinja2 pyyaml
    
    - name: Generate security report
      run: |
        python scripts/generate-security-report.py
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-compliance-report
        path: |
          security-report.html
          security-report.json
          security-report.pdf
    
    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const reportPath = 'security-report.json';
          
          if (fs.existsSync(reportPath)) {
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            
            const summary = `
            ## 🔒 Security & Compliance Scan Results
            
            ### 📊 Summary
            - **Critical Issues**: ${report.summary.critical || 0}
            - **High Issues**: ${report.summary.high || 0}
            - **Medium Issues**: ${report.summary.medium || 0}
            - **Low Issues**: ${report.summary.low || 0}
            
            ### 🚨 Critical Findings
            ${report.critical_findings?.length > 0 ? report.critical_findings.map(f => `- ${f.title}: ${f.description}`).join('\n') : 'No critical issues found ✅'}
            
            ### 📋 Recommendations
            ${report.recommendations?.length > 0 ? report.recommendations.map(r => `- ${r}`).join('\n') : 'All security checks passed ✅'}
            
            [View Full Report](${report.report_url})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }

  # Security Gate
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [container-vulnerability-scan, dependency-vulnerability-scan, secrets-detection]
    if: github.event_name == 'pull_request'
    steps:
    - name: Check for critical vulnerabilities
      run: |
        # This step will fail if any critical vulnerabilities are found
        # The actual logic would be implemented based on the scan results
        echo "Security gate passed - no critical vulnerabilities found"
    
    - name: Block merge if security issues found
      if: failure()
      run: |
        echo "🚨 CRITICAL: Security vulnerabilities detected. Merge blocked."
        echo "Please fix the identified security issues before merging."
        exit 1 